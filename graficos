import matplotlib.pyplot as plt
import csv
from datetime import datetime
import calendar
#ABRIR ARCHIVO
with open('Play_Store_Data.csv', 'r', encoding = 'utf-8') as archivo:
    lector = csv.reader(archivo)
    datos = []
    for fila in lector:
        datos.append(fila)
    cabecera = datos[0]
    data = datos[1:]

#GRÁFICO DE APPS POR CATEGORÍA

categorias_apps = {}
for fila in data:
    categoria = fila[cabecera.index("Category")]
    if categoria in categorias_apps:
        categorias_apps[categoria]+=1
    else:
        categorias_apps[categoria] = 1

#ORDENADO DE MAYOR A MENOR
ordenado_cat = dict(sorted(categorias_apps.items(), key = lambda x: x[1], reverse = True))

categorias = list(ordenado_cat.keys())
cantidad = list(ordenado_cat.values())

plt.bar(categorias, cantidad)
plt.xlabel("Categoría")
plt.ylabel("Juegos por categoría")
plt.title("Categorías App Store")
plt.xticks(rotation=90)
plt.show()

#CATEGORIA POR PROMEDIO DE RATINGS

categorias_rat = {}
for fila in data:
    categoria = fila[cabecera.index("Category")]
    if fila[2] == "NaN":
            rating = 0
    else:
        rating = float(fila[2])
    if categoria in categorias_rat:
        
        categorias_rat[categoria]+= rating
    else:
        categorias_rat[categoria] = rating

for i in categorias_rat.keys():
    categorias_rat[i] = categorias_rat[i]/categorias_apps[i]

ordenado_rating = dict(sorted(categorias_rat.items(), key = lambda x: x[1], reverse = True))
categorias = list(ordenado_rating.keys())
media = list(ordenado_rating.values())

plt.yticks([0,0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5], ['0', '0.5', '1', '1.5', '2', '2.5', '3', '3.5', '4', '4.5'])

plt.bar(categorias, media, width=0.8)
plt.xlabel("Categoría")
plt.ylabel("Promedio de rating")
plt.title("Promedio de rating de aplicación por categoría")
plt.xticks(rotation=90)
plt.ylim(2.5, 4.8)
plt.show()



#GÉNEROS CON AL MENOS 3 APLICACIONES PAGAS

genero_desc = {}
for fila in data:
    precio = fila[cabecera.index("Type")]
    genero = fila[cabecera.index("Genres")]

    if genero in genero_desc and precio != "Free":
        genero_desc[genero]+= 1
    elif genero not in genero_desc and precio != "Free":
        genero_desc[genero] = 1

ordenado_genero_pagas = dict(sorted(genero_desc.items(), key = lambda x: x[1], reverse = True))
#FILTRO PARA BORRAR LOS GÉNEROS CON SOLO UNA APP
generos_filtrados = {genero: pagos for genero, pagos in ordenado_genero_pagas.items() if pagos >= 5}
generos = list(generos_filtrados.keys())
pagos = list(generos_filtrados.values())

plt.bar(generos, pagos)
plt.xlabel("Género")
plt.ylabel("Aplicaciones pagas")
plt.title("Aplicaciones pagas por género (Para géneros con +5 apps pagas)")
plt.xticks(rotation=90)
plt.show()

#PROPORCION DE CONTENT RATING

publicos_lista = {}
for fila in data:
    publicos = fila[cabecera.index("Content Rating")]
    if publicos in publicos_lista:
        publicos_lista[publicos]+= 1
    else:
        publicos_lista[publicos] = 1


suma_minorias = 0
categ = "Otros"
for i in publicos_lista.keys():
    if publicos_lista[i]/len(data) < 0.01:
        if suma_minorias == 0:
            suma_minorias = publicos_lista[i]
        else:
            suma_minorias += publicos_lista[i]

publicos_lista[categ] = suma_minorias

categorias_filtrados = {categorias: nombre for categorias, nombre in publicos_lista.items() if (nombre/len(data) > 0.01) or (categorias == "Otros")}



publicos_fin = list(categorias_filtrados.keys())
cant = list(categorias_filtrados.values())
plt.pie(cant, labels = publicos_fin, autopct="%1.2f%%", labeldistance=1.1, rotatelabels=True)
plt.title("Categorías de edad", loc = "center")
plt.show()

#APPS POR ULTIMA ACTUALIZACION

fechas = {}
for fila in data:
    fecha = fila[cabecera.index("Last Updated")]
    formato = "%B %d, %Y"  # Este formato coincide con la cadena de entrada
    fecha_datetime = datetime.strptime(fecha, formato)
    if fecha_datetime in fechas:
        fechas[fecha_datetime]+= 1
    else:
        fechas[fecha_datetime] = 1



conteo_por_mes = {}
for fecha, conteo in fechas.items():
    if fecha.year >= 2017:
        año = fecha.year
        mes = fecha.month
        if año not in conteo_por_mes:
            conteo_por_mes[año] = {}
        if mes not in conteo_por_mes[año]:
            conteo_por_mes[año][mes] = 0
        conteo_por_mes[año][mes] += conteo
    else:
        año = fecha.year
        if año not in conteo_por_mes:
            conteo_por_mes[año] = conteo
        conteo_por_mes[año]+= conteo

orden_años = []
for año, meses in sorted(conteo_por_mes.items()):
    if año >= 2017:
        for mes, conteo in sorted(meses.items()):
            orden_años.append((año, mes, conteo))
    else:
        orden_años.append((año, conteo_por_mes[año]))

fechas_con_formato = []
conteos = []
for i in orden_años:
    if i[0] < 2017:
        fechas_con_formato.append(i[0])
        conteos.append(i[1])
    else:
        # Formatea la fecha como "Mes Año"
        fecha_formateada = f"{calendar.month_name[i[1]]} {i[0]}"
        fechas_con_formato.append(fecha_formateada)
        conteos.append(i[2])

plt.plot(fechas_con_formato, conteos)
plt.xlabel('Año')
plt.ylabel('Conteo')
plt.xticks(rotation=90)
plt.title('Conteo por Mes y Año')
plt.show()
